















Las ramas se crean basándonos en otra rama, generalmente master. El comando: git branch <new_branch> <starting_branch> toma una rama existente y crea una rama separada para trabajar en ella.
Indica cuál de las siguientes afirmaciones sobre git branch es falsa:
 Todas son ciertas.

Tengo un Working Directory con los archivos file1, file2 y fileTengo algunos commits. Ejecuto un git rm * pero no hago commit (por tanto, tengo ese borrado en staging).
Si ejecuto un git checkout -- . sigo sin visualizar mis archivos en Working Directory. ¿Por qué?
 Porque no puede estar en 2 a la vez

El comando git diffpermite analizar diferencias de los ficheros con los que trabajamos, lo que nos ayuda a encontrar errores. El comando git diff HEAD~2 HEAD
 Muestra las diferencias entre las versiones de archivos de la instantánea HEAD versus dos versiones atrás de HEAD.

¿Con qué comando puedo crear la rama nueva_rama?
 Las dos son correctas

El comando git rebase es básicamente un cherry-pick automatizado. Determina una serie de commits y luego los escoge uno a uno en el mismo orden en otro lugar.
Respecto a un git rebase indique cuál de las siguientes afirmaciones es cierta:
 Todas son ciertas.

¿Con qué comando de git podemos conectarnos a un repositorio remoto para trabajar, y traernos su contenido a un directorio vacío de trabajo recién creado y en el que me encuentro?
 Las dos son correctas.

https://github.com/sharkdp/bat ¿con qué comando puedo listar las ramas?`
 `git branch`o también `git branch -v -a`para obtener más información.

Supongamos que acabo de crear un fichero en mi Working Directory llamado new-file.
Ejecutamos git add new-file
La salida de un git status es: 

On
 branch master
Your branch 
is
 ahead 
of
'origin
/master' by 
2
 commits.
  (
use
"git push"
to
 publish your local commits)

Changes 
to
 be committed:
  (
use
"git reset HEAD 
..." to unstage)

        new file:   new-file


Sin querer, ejecuto el comando rm new-file

Como nunca he realizado un commit, no tenemos el fichero en el área de confirmación (directorio .git), aunque sí lo tengo en el área de staging. ¿Con qué comando podría recuperar el fichero que se encuentra en staging no perder mi trabajo?
 git reset new-file


Si queremos obviar o no considerar ciertos ficheros que cumplan un patrón en nuestro Working Directory para que siempre queden en estado untracked, y no pasen a staged ni commited, el artificio o mecanismo para hacerlo es a través de...
 Fichero .gitignore

Tengo el hashid de una revisión o commit concreto gracias a git log. Quiero ver todos los cambios en todos los ficheros de esa revisión. ¿Qué comando/s puedo usar para saberlo?
 `git show <hashid>`

Supongamos que hemos creado un par de archivos en nuestro Working Directory. Aún no los hemos agregado a la Staging Area con el comando git add. Por tanto, se encuentran en estado untracked. 
¿Con qué comando puedo visualizar en el Working Directory el estado de los archivos pendientes de agregar y el estado de los que se han agregado y están preparados (staged) a falta de confirmar (commit)?
 `git status`


¿Cuáles de las siguientes afirmaciones son verdaderas git diff y lanzar git diff --cached?
 El primero compara el Working Directory con la versión del commitid que digamos. El segundo sólo compara aquellos archivos de staging que le digamos (es decir, ficheros a los que hayamos incluido con el comando `git add`)
 El comando admite un `commit-id`contra el que analizar las diferencias, de manera que `git diff`es equivalente a `git diff HEAD`de igual manera que `git diff --cached HEAD`es equivalente a `git diff --cached` En resumen, HEAD es el valor por defecto.

¿Cómo puedo subir los cambios efectuados en mi rama remota de repositorio con el que me he vinculado vía git remote add origin o vía el comando git clone ?
 `git push <remote_name> <branch_name>`

El comando git cherry-pick se utiliza para tomar el cambio introducido en un único commit de Git y tratar de volver a introducirlo como un nuevo commit en la rama donde estás actualmente. Esto puede ser útil para escoger solamente uno o dos commits de una rama individual en lugar de fusionar la rama que contiene todos los cambios. Es decir, no me traigo un "pull" de todos los archivos, sino solo de los cambios concretos que yo picotee (cherry-pick) del commit concreto que yo elija.
Ejemplo de formato de uso: git cherry-pick origin/master 5d5bf61
¿Cuáles de las siguientes afirmaciones son ciertas?
 Todas son afirmaciones ciertas.


¿Cuál es el comando para elegir como herramienta de gestión de diferencias de ficheros de git a TKDIFF?
 `git config --global diff.tool tkdiff`

¿Alguno de estos comandos permite modificar la salida de logs de git? Se pretende obtener el hashid, el nombre del autor de la modificación, de la referencia de timestamp de la misma y del texto de ayuda o asunto que etiqueta a la modificación?
 git log --pretty="%h %an %ar - %s"
 git log --pretty=format:"%h %an %ar - %s"

Muchas veces, cuando has estado trabajando en una parte de tu proyecto, las cosas se encuentran desordenadas y quieres cambiar de ramas por un momento para trabajar en algo más. El problema es que no quieres hacer un commit de un trabajo que va por la mitad, así puedes volver a ese punto más tarde. La respuesta a ese problema es el comando git stash, que efectúa un "guardado rápido", como un portapapeles, que luego puedes utilizar.
Indique cuál de las siguientes afirmaciones es cierta respecto al comando git stash:
 En cualquier momento de mi proyecto, y en cualquier rama, puedo lanzar un `git stash`y efectuará un guardado rápido (como una instantánea al vuelo) de lo que tengo en un instante dado.
 Mediante el comando `git stash apply`puedo recuperar aquello que haya guardado rápidamente con el comando `git stash`y aplicarlo en mi directorio de trabajo.

¿Cuáles son las tres secciones principales de un proyecto GIT?
 Working Directory, Staging Area, directorio .git


Si quisiéramos DESHACER o enmendar el último commit hecho porque en dicho cambio se me olvidó agregar algún fichero o quizás cambiar el mensaje de commit... ¿Qué comando sería el más apropiado para ello?
 `git commit --amend`

Cuáles de las siguientes afirmaciones acerca del comando git blame son FALSAS?
 Ninguna de las afirmaciones es FALSA.





MAL:

¿Qué efecto tendría este comando: git push origin :mi-rama ?
 Sube los cambios de mi-rama al repositorio remoto.
 Sube los cambios de mi-rama al repositorio remoto y los fusiona con la rama master.
 Ninguno de las opciones es correcta.

¿Cuál o cuales de las siguientes afirmaciones es/son falsa/s?
 Con `git diff` podemos ver la diferencia de un archivo *untracked* respecto a la versión más reciente del mismo archivo ya aprobada anteriormente (*commited*)
 Puedo pasar al comando `git diff` como argumento el hash-id concreto del versionado de un archivo, junto con el nombre de ese archivo, para que lo compare con ése mismo archivo modificado y que en este momento se encuentre en estado *untracked*.
 Con `git difftool` podemos ver la diferencia de un archivo *untracked* respecto a la versión más reciente del mismo archivo ya aprobada anteriormente (*commited*) con una herramienta de nuestra elección

¿Qué efecto tendría el comando: git branch -D mi-rama ?
 Borraría la rama remota mi-rama.
 Borraría la rama local mi-rama.
 Trabajaría con la rama en estado <u>D</u>etached o desconectado.

Tras trabajar en mi proyecto versionado con GIT durante horas, acabo de borrar por error un fichero que iba aprobado en mi última revisión (y en todas las anteriores).
¿Qué comando es el apropiado para restaurarlo?
 `git checkout -- <file>`
 `git commit --restore <file>`
 `git restore <file>`

Supongamos que acabo de realizar unos cambios en mí working directory. Agrego a staging los ficheros que necesito, y hago commit. Justo después de hacerlo, caigo en la cuenta justo después de procesarse el commit, que olvidé agregar un fichero que debería haber ido en esa revisión. ¿Qué solución es la más apropiada?
 Puedo hacer un `git revert HEAD`y luego volver a meter todos los cambios en todos los archivos y esta vez, acordarme de incluir todos los ficheros al siguiente commit. Además, el propio revert introduce un nuevo hashid identificativo de una nueva revisión.

Descubre la afirmación falsa sobre GIT:
 GIT es software libre

Tras trabajar en mi proyecto versionado con GIT durante horas, acabo de borrar A PROPÓSITO con git rm un fichero que iba aprobado en mi última revisión (y en todas las anteriores).
¿Con cuál/cuáles del/de los comando/s siguiente/s obtendré alguna/s diferencia/s respecto a lo que se encuentre en el área de aprobación o commit?
 `git diff`

El comando que me permite revertir todos los cambios producidos entre la versión más reciente aprobada y las dos anteriores es:
 git revert HEAD~2...HEAD~1
